#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ResidentalCalc
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ResidentalData")]
	public partial class ResidentalCalcDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertSupplyResourceContract(SupplyResourceContract instance);
    partial void UpdateSupplyResourceContract(SupplyResourceContract instance);
    partial void DeleteSupplyResourceContract(SupplyResourceContract instance);
    partial void InsertAccounts(Accounts instance);
    partial void UpdateAccounts(Accounts instance);
    partial void DeleteAccounts(Accounts instance);
    partial void InsertMeteringDevice(MeteringDevice instance);
    partial void UpdateMeteringDevice(MeteringDevice instance);
    partial void DeleteMeteringDevice(MeteringDevice instance);
    partial void InsertMeteringDeviceHistory(MeteringDeviceHistory instance);
    partial void UpdateMeteringDeviceHistory(MeteringDeviceHistory instance);
    partial void DeleteMeteringDeviceHistory(MeteringDeviceHistory instance);
    partial void InsertObjectAddress(ObjectAddress instance);
    partial void UpdateObjectAddress(ObjectAddress instance);
    partial void DeleteObjectAddress(ObjectAddress instance);
    partial void InsertPayerInfo(PayerInfo instance);
    partial void UpdatePayerInfo(PayerInfo instance);
    partial void DeletePayerInfo(PayerInfo instance);
    partial void InsertRefNsiService51(RefNsiService51 instance);
    partial void UpdateRefNsiService51(RefNsiService51 instance);
    partial void DeleteRefNsiService51(RefNsiService51 instance);
    partial void InsertRefServices(RefServices instance);
    partial void UpdateRefServices(RefServices instance);
    partial void DeleteRefServices(RefServices instance);
    partial void InsertRefStandard(RefStandard instance);
    partial void UpdateRefStandard(RefStandard instance);
    partial void DeleteRefStandard(RefStandard instance);
    partial void InsertRefTariff(RefTariff instance);
    partial void UpdateRefTariff(RefTariff instance);
    partial void DeleteRefTariff(RefTariff instance);
    partial void InsertContractSubject(ContractSubject instance);
    partial void UpdateContractSubject(ContractSubject instance);
    partial void DeleteContractSubject(ContractSubject instance);
    partial void InsertChargeInfo(ChargeInfo instance);
    partial void UpdateChargeInfo(ChargeInfo instance);
    partial void DeleteChargeInfo(ChargeInfo instance);
    partial void InsertCalculation(Calculation instance);
    partial void UpdateCalculation(Calculation instance);
    partial void DeleteCalculation(Calculation instance);
    #endregion
		
		public ResidentalCalcDataClassesDataContext() : 
				base(global::ResidentalCalc.Properties.Settings.Default.ResidentalDataConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ResidentalCalcDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ResidentalCalcDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ResidentalCalcDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ResidentalCalcDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SupplyResourceContract> SupplyResourceContract
		{
			get
			{
				return this.GetTable<SupplyResourceContract>();
			}
		}
		
		public System.Data.Linq.Table<Accounts> Accounts
		{
			get
			{
				return this.GetTable<Accounts>();
			}
		}
		
		public System.Data.Linq.Table<MeteringDevice> MeteringDevice
		{
			get
			{
				return this.GetTable<MeteringDevice>();
			}
		}
		
		public System.Data.Linq.Table<MeteringDeviceHistory> MeteringDeviceHistory
		{
			get
			{
				return this.GetTable<MeteringDeviceHistory>();
			}
		}
		
		public System.Data.Linq.Table<ObjectAddress> ObjectAddress
		{
			get
			{
				return this.GetTable<ObjectAddress>();
			}
		}
		
		public System.Data.Linq.Table<PayerInfo> PayerInfo
		{
			get
			{
				return this.GetTable<PayerInfo>();
			}
		}
		
		public System.Data.Linq.Table<RefNsiService51> RefNsiService51
		{
			get
			{
				return this.GetTable<RefNsiService51>();
			}
		}
		
		public System.Data.Linq.Table<RefServices> RefServices
		{
			get
			{
				return this.GetTable<RefServices>();
			}
		}
		
		public System.Data.Linq.Table<RefStandard> RefStandard
		{
			get
			{
				return this.GetTable<RefStandard>();
			}
		}
		
		public System.Data.Linq.Table<RefTariff> RefTariff
		{
			get
			{
				return this.GetTable<RefTariff>();
			}
		}
		
		public System.Data.Linq.Table<ContractSubject> ContractSubject
		{
			get
			{
				return this.GetTable<ContractSubject>();
			}
		}
		
		public System.Data.Linq.Table<ChargeInfo> ChargeInfo
		{
			get
			{
				return this.GetTable<ChargeInfo>();
			}
		}
		
		public System.Data.Linq.Table<vwChargeInfo> vwChargeInfo
		{
			get
			{
				return this.GetTable<vwChargeInfo>();
			}
		}
		
		public System.Data.Linq.Table<Calculation> Calculation
		{
			get
			{
				return this.GetTable<Calculation>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spCreateChargeInfo", IsComposable=true)]
		public object spCreateChargeInfo([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> rowGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationMonth", DbType="Int")] System.Nullable<int> calculationMonth, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationYear", DbType="Int")] System.Nullable<int> calculationYear)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowGUID, accountGUID, calculationMonth, calculationYear).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertAccount")]
		public int spInsertAccount([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectAddressGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> objectAddressGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountNumber", DbType="NVarChar(30)")] string accountNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountState", DbType="Bit")] System.Nullable<bool> accountState, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LivingPersonsNumber", DbType="Int")] System.Nullable<int> livingPersonsNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GIS_AccountGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> gIS_AccountGUID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectAddressGUID, accountNumber, accountState, livingPersonsNumber, gIS_AccountGUID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertCalculationData")]
		public int spInsertCalculationData([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RowGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> rowGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountIndividualServicesGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountIndividualServicesGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> meteringDeviceGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationResult", DbType="Decimal(18,2)")] System.Nullable<decimal> calculationResult, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationVolume", DbType="Decimal(18,2)")] System.Nullable<decimal> calculationVolume, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VolumeDeterminingMethod", DbType="NVarChar(1)")] string volumeDeterminingMethod)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), rowGUID, accountIndividualServicesGUID, meteringDeviceGUID, calculationResult, calculationVolume, volumeDeterminingMethod);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertMeteringDeviceHistory")]
		public int spInsertMeteringDeviceHistory([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> meteringDeviceGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceValue", DbType="Decimal(18,2)")] System.Nullable<decimal> meteringDeviceValue, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceDate", DbType="Date")] System.Nullable<System.DateTime> meteringDeviceDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), meteringDeviceGUID, meteringDeviceValue, meteringDeviceDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertObjectAddress")]
		public int spInsertObjectAddress([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SupplyResourceContractGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> supplyResourceContractGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FIASHouseGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> fIASHouseGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Apartment", DbType="NVarChar(5)")] string apartment, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LivingRoom", DbType="NVarChar(5)")] string livingRoom, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GIS_ObjectGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> gIS_ObjectGUID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), supplyResourceContractGUID, fIASHouseGUID, apartment, livingRoom, gIS_ObjectGUID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertPayerInfo")]
		public int spInsertPayerInfo([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Surname", DbType="NVarChar(50)")] string surname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GrandName", DbType="NVarChar(50)")] string grandName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SNILS", DbType="NVarChar(11)")] string sNILS, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Series", DbType="NVarChar(10)")] string series, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Number", DbType="NVarChar(10)")] string number, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IssueDate", DbType="Date")] System.Nullable<System.DateTime> issueDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountGUID, surname, name, grandName, sNILS, series, number, issueDate);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnIsMeteringDevice", IsComposable=true)]
		public System.Nullable<decimal> fnIsMeteringDevice([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> meteringDeviceGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationMonth", DbType="Int")] System.Nullable<int> calculationMonth, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationYear", DbType="Int")] System.Nullable<int> calculationYear)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), meteringDeviceGUID, calculationMonth, calculationYear).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnCalculationAverage", IsComposable=true)]
		public IQueryable<fnCalculationAverageResult> fnCalculationAverage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsAverageVolume", DbType="Decimal(18,2)")] System.Nullable<decimal> isAverageVolume, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountIndividualServicesGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountIndividualServicesGUID)
		{
			return this.CreateMethodCallQuery<fnCalculationAverageResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), isAverageVolume, accountIndividualServicesGUID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnCalculationReading", IsComposable=true)]
		public IQueryable<fnCalculationReadingResult> fnCalculationReading([global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsMeteringDevice", DbType="Decimal(18,2)")] System.Nullable<decimal> isMeteringDevice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountIndividualServicesGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountIndividualServicesGUID)
		{
			return this.CreateMethodCallQuery<fnCalculationReadingResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), isMeteringDevice, accountIndividualServicesGUID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnCalculationStandard", IsComposable=true)]
		public IQueryable<fnCalculationStandardResult> fnCalculationStandard([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountIndividualServicesGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountIndividualServicesGUID)
		{
			return this.CreateMethodCallQuery<fnCalculationStandardResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountGUID, accountIndividualServicesGUID);
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnGetAccountIndividualServicesStandard", IsComposable=true)]
		public System.Nullable<decimal> fnGetAccountIndividualServicesStandard([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountIndividualServicesGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountIndividualServicesGUID)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountIndividualServicesGUID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnGetAccountIndividualServicesTariff", IsComposable=true)]
		public System.Nullable<decimal> fnGetAccountIndividualServicesTariff([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountIndividualServicesGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountIndividualServicesGUID)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountIndividualServicesGUID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnGetAccountLivingPersonsNumber", IsComposable=true)]
		public System.Nullable<int> fnGetAccountLivingPersonsNumber([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountGUID)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountGUID).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnGetMeteringDeviceVolume", IsComposable=true)]
		public System.Nullable<decimal> fnGetMeteringDeviceVolume([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> meteringDeviceGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Month", DbType="Int")] System.Nullable<int> month, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Year", DbType="Int")] System.Nullable<int> year)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), meteringDeviceGUID, month, year).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.fnIsAverageVolume", IsComposable=true)]
		public System.Nullable<decimal> fnIsAverageVolume([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> meteringDeviceGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationMonth", DbType="Int")] System.Nullable<int> calculationMonth, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationYear", DbType="Int")] System.Nullable<int> calculationYear)
		{
			return ((System.Nullable<decimal>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), meteringDeviceGUID, calculationMonth, calculationYear).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertContractSubject")]
		public int spInsertContractSubject([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BeginDate", DbType="Date")] System.Nullable<System.DateTime> beginDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="EndDate", DbType="Date")] System.Nullable<System.DateTime> endDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ServiceGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> serviceGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SupplyResourceContractGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> supplyResourceContractGUID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), beginDate, endDate, serviceGUID, supplyResourceContractGUID);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spCreateCalculation")]
		public int spCreateCalculation([global::System.Data.Linq.Mapping.ParameterAttribute(Name="AccountGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> accountGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationMonth", DbType="Int")] System.Nullable<int> calculationMonth, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CalculationYear", DbType="Int")] System.Nullable<int> calculationYear)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), accountGUID, calculationMonth, calculationYear);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertRefNsiService51")]
		public int spInsertRefNsiService51([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Code", DbType="NVarChar(20)")] string code, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> gUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="IsActual", DbType="Bit")] System.Nullable<bool> isActual, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Value", DbType="NVarChar(50)")] string value, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GIS_Modified", DbType="Date")] System.Nullable<System.DateTime> gIS_Modified)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), code, gUID, isActual, value, gIS_Modified);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertMeteringDevice")]
		public int spInsertMeteringDevice([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ObjectAddressGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> objectAddressGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceModel", DbType="NVarChar(100)")] string meteringDeviceModel, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceStamp", DbType="NVarChar(100)")] string meteringDeviceStamp, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MeteringDeviceNumber", DbType="NVarChar(50)")] string meteringDeviceNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VerificationInterval", DbType="Int")] System.Nullable<int> verificationInterval, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InstallationDate", DbType="Date")] System.Nullable<System.DateTime> installationDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="VerificationDate", DbType="Date")] System.Nullable<System.DateTime> verificationDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GIS_MeteringDeviceGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> gIS_MeteringDeviceGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GIS_VersionNumber", DbType="Int")] System.Nullable<int> gIS_VersionNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), objectAddressGUID, meteringDeviceModel, meteringDeviceStamp, meteringDeviceNumber, verificationInterval, installationDate, verificationDate, gIS_MeteringDeviceGUID, gIS_VersionNumber);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.spInsertSupplyResourceContract")]
		public int spInsertSupplyResourceContract([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ContractNumber", DbType="NVarChar(100)")] string contractNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SigningDateStart", DbType="Date")] System.Nullable<System.DateTime> signingDateStart, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SigningDateEnd", DbType="Date")] System.Nullable<System.DateTime> signingDateEnd, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ContractState", DbType="Bit")] System.Nullable<bool> contractState, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GIS_ContractRootGUID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> gIS_ContractRootGUID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GIS_VersionNumber", DbType="Int")] System.Nullable<int> gIS_VersionNumber)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), contractNumber, signingDateStart, signingDateEnd, contractState, gIS_ContractRootGUID, gIS_VersionNumber);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SupplyResourceContract")]
	public partial class SupplyResourceContract : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _ContractNumber;
		
		private System.DateTime _SigningDateStart;
		
		private System.Nullable<System.DateTime> _SigningDateEnd;
		
		private bool _ContractState;
		
		private System.Nullable<System.Guid> _GIS_ContractRootGUID;
		
		private System.Nullable<int> _GIS_VersionNumber;
		
		private EntitySet<ObjectAddress> _ObjectAddress;
		
		private EntitySet<ContractSubject> _ContractSubject;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnContractNumberChanging(string value);
    partial void OnContractNumberChanged();
    partial void OnSigningDateStartChanging(System.DateTime value);
    partial void OnSigningDateStartChanged();
    partial void OnSigningDateEndChanging(System.Nullable<System.DateTime> value);
    partial void OnSigningDateEndChanged();
    partial void OnContractStateChanging(bool value);
    partial void OnContractStateChanged();
    partial void OnGIS_ContractRootGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnGIS_ContractRootGUIDChanged();
    partial void OnGIS_VersionNumberChanging(System.Nullable<int> value);
    partial void OnGIS_VersionNumberChanged();
    #endregion
		
		public SupplyResourceContract()
		{
			this._ObjectAddress = new EntitySet<ObjectAddress>(new Action<ObjectAddress>(this.attach_ObjectAddress), new Action<ObjectAddress>(this.detach_ObjectAddress));
			this._ContractSubject = new EntitySet<ContractSubject>(new Action<ContractSubject>(this.attach_ContractSubject), new Action<ContractSubject>(this.detach_ContractSubject));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractNumber", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string ContractNumber
		{
			get
			{
				return this._ContractNumber;
			}
			set
			{
				if ((this._ContractNumber != value))
				{
					this.OnContractNumberChanging(value);
					this.SendPropertyChanging();
					this._ContractNumber = value;
					this.SendPropertyChanged("ContractNumber");
					this.OnContractNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SigningDateStart", DbType="Date NOT NULL")]
		public System.DateTime SigningDateStart
		{
			get
			{
				return this._SigningDateStart;
			}
			set
			{
				if ((this._SigningDateStart != value))
				{
					this.OnSigningDateStartChanging(value);
					this.SendPropertyChanging();
					this._SigningDateStart = value;
					this.SendPropertyChanged("SigningDateStart");
					this.OnSigningDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SigningDateEnd", DbType="Date")]
		public System.Nullable<System.DateTime> SigningDateEnd
		{
			get
			{
				return this._SigningDateEnd;
			}
			set
			{
				if ((this._SigningDateEnd != value))
				{
					this.OnSigningDateEndChanging(value);
					this.SendPropertyChanging();
					this._SigningDateEnd = value;
					this.SendPropertyChanged("SigningDateEnd");
					this.OnSigningDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractState", DbType="Bit NOT NULL")]
		public bool ContractState
		{
			get
			{
				return this._ContractState;
			}
			set
			{
				if ((this._ContractState != value))
				{
					this.OnContractStateChanging(value);
					this.SendPropertyChanging();
					this._ContractState = value;
					this.SendPropertyChanged("ContractState");
					this.OnContractStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_ContractRootGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GIS_ContractRootGUID
		{
			get
			{
				return this._GIS_ContractRootGUID;
			}
			set
			{
				if ((this._GIS_ContractRootGUID != value))
				{
					this.OnGIS_ContractRootGUIDChanging(value);
					this.SendPropertyChanging();
					this._GIS_ContractRootGUID = value;
					this.SendPropertyChanged("GIS_ContractRootGUID");
					this.OnGIS_ContractRootGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_VersionNumber", DbType="Int")]
		public System.Nullable<int> GIS_VersionNumber
		{
			get
			{
				return this._GIS_VersionNumber;
			}
			set
			{
				if ((this._GIS_VersionNumber != value))
				{
					this.OnGIS_VersionNumberChanging(value);
					this.SendPropertyChanging();
					this._GIS_VersionNumber = value;
					this.SendPropertyChanged("GIS_VersionNumber");
					this.OnGIS_VersionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplyResourceContract_ObjectAddress", Storage="_ObjectAddress", ThisKey="GUID", OtherKey="SupplyResourceContractGUID")]
		public EntitySet<ObjectAddress> ObjectAddress
		{
			get
			{
				return this._ObjectAddress;
			}
			set
			{
				this._ObjectAddress.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplyResourceContract_ContractSubject", Storage="_ContractSubject", ThisKey="GUID", OtherKey="SupplyResourceContractGUID")]
		public EntitySet<ContractSubject> ContractSubject
		{
			get
			{
				return this._ContractSubject;
			}
			set
			{
				this._ContractSubject.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ObjectAddress(ObjectAddress entity)
		{
			this.SendPropertyChanging();
			entity.SupplyResourceContract = this;
		}
		
		private void detach_ObjectAddress(ObjectAddress entity)
		{
			this.SendPropertyChanging();
			entity.SupplyResourceContract = null;
		}
		
		private void attach_ContractSubject(ContractSubject entity)
		{
			this.SendPropertyChanging();
			entity.SupplyResourceContract = this;
		}
		
		private void detach_ContractSubject(ContractSubject entity)
		{
			this.SendPropertyChanging();
			entity.SupplyResourceContract = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Accounts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _ObjectAddressGUID;
		
		private string _AccountNumber;
		
		private bool _AccountState;
		
		private int _LivingPersonsNumber;
		
		private System.Nullable<System.Guid> _GIS_AccountGUID;
		
		private EntitySet<PayerInfo> _PayerInfo;
		
		private EntitySet<Calculation> _Calculation;
		
		private EntityRef<ObjectAddress> _ObjectAddress;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnObjectAddressGUIDChanging(System.Guid value);
    partial void OnObjectAddressGUIDChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnAccountStateChanging(bool value);
    partial void OnAccountStateChanged();
    partial void OnLivingPersonsNumberChanging(int value);
    partial void OnLivingPersonsNumberChanged();
    partial void OnGIS_AccountGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnGIS_AccountGUIDChanged();
    #endregion
		
		public Accounts()
		{
			this._PayerInfo = new EntitySet<PayerInfo>(new Action<PayerInfo>(this.attach_PayerInfo), new Action<PayerInfo>(this.detach_PayerInfo));
			this._Calculation = new EntitySet<Calculation>(new Action<Calculation>(this.attach_Calculation), new Action<Calculation>(this.detach_Calculation));
			this._ObjectAddress = default(EntityRef<ObjectAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectAddressGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ObjectAddressGUID
		{
			get
			{
				return this._ObjectAddressGUID;
			}
			set
			{
				if ((this._ObjectAddressGUID != value))
				{
					if (this._ObjectAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectAddressGUIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectAddressGUID = value;
					this.SendPropertyChanged("ObjectAddressGUID");
					this.OnObjectAddressGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountState", DbType="Bit NOT NULL")]
		public bool AccountState
		{
			get
			{
				return this._AccountState;
			}
			set
			{
				if ((this._AccountState != value))
				{
					this.OnAccountStateChanging(value);
					this.SendPropertyChanging();
					this._AccountState = value;
					this.SendPropertyChanged("AccountState");
					this.OnAccountStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivingPersonsNumber", DbType="Int NOT NULL")]
		public int LivingPersonsNumber
		{
			get
			{
				return this._LivingPersonsNumber;
			}
			set
			{
				if ((this._LivingPersonsNumber != value))
				{
					this.OnLivingPersonsNumberChanging(value);
					this.SendPropertyChanging();
					this._LivingPersonsNumber = value;
					this.SendPropertyChanged("LivingPersonsNumber");
					this.OnLivingPersonsNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_AccountGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GIS_AccountGUID
		{
			get
			{
				return this._GIS_AccountGUID;
			}
			set
			{
				if ((this._GIS_AccountGUID != value))
				{
					this.OnGIS_AccountGUIDChanging(value);
					this.SendPropertyChanging();
					this._GIS_AccountGUID = value;
					this.SendPropertyChanged("GIS_AccountGUID");
					this.OnGIS_AccountGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accounts_PayerInfo", Storage="_PayerInfo", ThisKey="GUID", OtherKey="AccountGUID")]
		public EntitySet<PayerInfo> PayerInfo
		{
			get
			{
				return this._PayerInfo;
			}
			set
			{
				this._PayerInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accounts_Calculation", Storage="_Calculation", ThisKey="GUID", OtherKey="AccountGUID")]
		public EntitySet<Calculation> Calculation
		{
			get
			{
				return this._Calculation;
			}
			set
			{
				this._Calculation.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectAddress_Accounts", Storage="_ObjectAddress", ThisKey="ObjectAddressGUID", OtherKey="GUID", IsForeignKey=true)]
		public ObjectAddress ObjectAddress
		{
			get
			{
				return this._ObjectAddress.Entity;
			}
			set
			{
				ObjectAddress previousValue = this._ObjectAddress.Entity;
				if (((previousValue != value) 
							|| (this._ObjectAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectAddress.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._ObjectAddress.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._ObjectAddressGUID = value.GUID;
					}
					else
					{
						this._ObjectAddressGUID = default(System.Guid);
					}
					this.SendPropertyChanged("ObjectAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PayerInfo(PayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.Accounts = this;
		}
		
		private void detach_PayerInfo(PayerInfo entity)
		{
			this.SendPropertyChanging();
			entity.Accounts = null;
		}
		
		private void attach_Calculation(Calculation entity)
		{
			this.SendPropertyChanging();
			entity.Accounts = this;
		}
		
		private void detach_Calculation(Calculation entity)
		{
			this.SendPropertyChanging();
			entity.Accounts = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeteringDevice")]
	public partial class MeteringDevice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _ObjectAddressGUID;
		
		private string _MeteringDeviceModel;
		
		private string _MeteringDeviceStamp;
		
		private string _MeteringDeviceNumber;
		
		private int _VerificationInterval;
		
		private System.DateTime _InstallationDate;
		
		private System.DateTime _VerificationDate;
		
		private System.Nullable<System.Guid> _GIS_MeteringDeviceGUID;
		
		private System.Nullable<int> _GIS_VersionNumber;
		
		private EntitySet<MeteringDeviceHistory> _MeteringDeviceHistory;
		
		private EntitySet<ChargeInfo> _ChargeInfo;
		
		private EntityRef<ObjectAddress> _ObjectAddress;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnObjectAddressGUIDChanging(System.Guid value);
    partial void OnObjectAddressGUIDChanged();
    partial void OnMeteringDeviceModelChanging(string value);
    partial void OnMeteringDeviceModelChanged();
    partial void OnMeteringDeviceStampChanging(string value);
    partial void OnMeteringDeviceStampChanged();
    partial void OnMeteringDeviceNumberChanging(string value);
    partial void OnMeteringDeviceNumberChanged();
    partial void OnVerificationIntervalChanging(int value);
    partial void OnVerificationIntervalChanged();
    partial void OnInstallationDateChanging(System.DateTime value);
    partial void OnInstallationDateChanged();
    partial void OnVerificationDateChanging(System.DateTime value);
    partial void OnVerificationDateChanged();
    partial void OnGIS_MeteringDeviceGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnGIS_MeteringDeviceGUIDChanged();
    partial void OnGIS_VersionNumberChanging(System.Nullable<int> value);
    partial void OnGIS_VersionNumberChanged();
    #endregion
		
		public MeteringDevice()
		{
			this._MeteringDeviceHistory = new EntitySet<MeteringDeviceHistory>(new Action<MeteringDeviceHistory>(this.attach_MeteringDeviceHistory), new Action<MeteringDeviceHistory>(this.detach_MeteringDeviceHistory));
			this._ChargeInfo = new EntitySet<ChargeInfo>(new Action<ChargeInfo>(this.attach_ChargeInfo), new Action<ChargeInfo>(this.detach_ChargeInfo));
			this._ObjectAddress = default(EntityRef<ObjectAddress>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectAddressGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ObjectAddressGUID
		{
			get
			{
				return this._ObjectAddressGUID;
			}
			set
			{
				if ((this._ObjectAddressGUID != value))
				{
					if (this._ObjectAddress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnObjectAddressGUIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectAddressGUID = value;
					this.SendPropertyChanged("ObjectAddressGUID");
					this.OnObjectAddressGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeteringDeviceModel", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MeteringDeviceModel
		{
			get
			{
				return this._MeteringDeviceModel;
			}
			set
			{
				if ((this._MeteringDeviceModel != value))
				{
					this.OnMeteringDeviceModelChanging(value);
					this.SendPropertyChanging();
					this._MeteringDeviceModel = value;
					this.SendPropertyChanged("MeteringDeviceModel");
					this.OnMeteringDeviceModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeteringDeviceStamp", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string MeteringDeviceStamp
		{
			get
			{
				return this._MeteringDeviceStamp;
			}
			set
			{
				if ((this._MeteringDeviceStamp != value))
				{
					this.OnMeteringDeviceStampChanging(value);
					this.SendPropertyChanging();
					this._MeteringDeviceStamp = value;
					this.SendPropertyChanged("MeteringDeviceStamp");
					this.OnMeteringDeviceStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeteringDeviceNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MeteringDeviceNumber
		{
			get
			{
				return this._MeteringDeviceNumber;
			}
			set
			{
				if ((this._MeteringDeviceNumber != value))
				{
					this.OnMeteringDeviceNumberChanging(value);
					this.SendPropertyChanging();
					this._MeteringDeviceNumber = value;
					this.SendPropertyChanged("MeteringDeviceNumber");
					this.OnMeteringDeviceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationInterval", DbType="Int NOT NULL")]
		public int VerificationInterval
		{
			get
			{
				return this._VerificationInterval;
			}
			set
			{
				if ((this._VerificationInterval != value))
				{
					this.OnVerificationIntervalChanging(value);
					this.SendPropertyChanging();
					this._VerificationInterval = value;
					this.SendPropertyChanged("VerificationInterval");
					this.OnVerificationIntervalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstallationDate", DbType="Date NOT NULL")]
		public System.DateTime InstallationDate
		{
			get
			{
				return this._InstallationDate;
			}
			set
			{
				if ((this._InstallationDate != value))
				{
					this.OnInstallationDateChanging(value);
					this.SendPropertyChanging();
					this._InstallationDate = value;
					this.SendPropertyChanged("InstallationDate");
					this.OnInstallationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationDate", DbType="Date NOT NULL")]
		public System.DateTime VerificationDate
		{
			get
			{
				return this._VerificationDate;
			}
			set
			{
				if ((this._VerificationDate != value))
				{
					this.OnVerificationDateChanging(value);
					this.SendPropertyChanging();
					this._VerificationDate = value;
					this.SendPropertyChanged("VerificationDate");
					this.OnVerificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_MeteringDeviceGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GIS_MeteringDeviceGUID
		{
			get
			{
				return this._GIS_MeteringDeviceGUID;
			}
			set
			{
				if ((this._GIS_MeteringDeviceGUID != value))
				{
					this.OnGIS_MeteringDeviceGUIDChanging(value);
					this.SendPropertyChanging();
					this._GIS_MeteringDeviceGUID = value;
					this.SendPropertyChanged("GIS_MeteringDeviceGUID");
					this.OnGIS_MeteringDeviceGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_VersionNumber", DbType="Int")]
		public System.Nullable<int> GIS_VersionNumber
		{
			get
			{
				return this._GIS_VersionNumber;
			}
			set
			{
				if ((this._GIS_VersionNumber != value))
				{
					this.OnGIS_VersionNumberChanging(value);
					this.SendPropertyChanging();
					this._GIS_VersionNumber = value;
					this.SendPropertyChanged("GIS_VersionNumber");
					this.OnGIS_VersionNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeteringDevice_MeteringDeviceHistory", Storage="_MeteringDeviceHistory", ThisKey="GUID", OtherKey="MeteringDeviceGUID")]
		public EntitySet<MeteringDeviceHistory> MeteringDeviceHistory
		{
			get
			{
				return this._MeteringDeviceHistory;
			}
			set
			{
				this._MeteringDeviceHistory.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeteringDevice_ChargeInfo", Storage="_ChargeInfo", ThisKey="GUID", OtherKey="MeteringDeviceGUID")]
		public EntitySet<ChargeInfo> ChargeInfo
		{
			get
			{
				return this._ChargeInfo;
			}
			set
			{
				this._ChargeInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectAddress_MeteringDevice", Storage="_ObjectAddress", ThisKey="ObjectAddressGUID", OtherKey="GUID", IsForeignKey=true)]
		public ObjectAddress ObjectAddress
		{
			get
			{
				return this._ObjectAddress.Entity;
			}
			set
			{
				ObjectAddress previousValue = this._ObjectAddress.Entity;
				if (((previousValue != value) 
							|| (this._ObjectAddress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ObjectAddress.Entity = null;
						previousValue.MeteringDevice.Remove(this);
					}
					this._ObjectAddress.Entity = value;
					if ((value != null))
					{
						value.MeteringDevice.Add(this);
						this._ObjectAddressGUID = value.GUID;
					}
					else
					{
						this._ObjectAddressGUID = default(System.Guid);
					}
					this.SendPropertyChanged("ObjectAddress");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeteringDeviceHistory(MeteringDeviceHistory entity)
		{
			this.SendPropertyChanging();
			entity.MeteringDevice = this;
		}
		
		private void detach_MeteringDeviceHistory(MeteringDeviceHistory entity)
		{
			this.SendPropertyChanging();
			entity.MeteringDevice = null;
		}
		
		private void attach_ChargeInfo(ChargeInfo entity)
		{
			this.SendPropertyChanging();
			entity.MeteringDevice = this;
		}
		
		private void detach_ChargeInfo(ChargeInfo entity)
		{
			this.SendPropertyChanging();
			entity.MeteringDevice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MeteringDeviceHistory")]
	public partial class MeteringDeviceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _MeteringDeviceGUID;
		
		private decimal _MeteringDeviceValue;
		
		private System.DateTime _MeteringDeviceDate;
		
		private EntityRef<MeteringDevice> _MeteringDevice;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnMeteringDeviceGUIDChanging(System.Guid value);
    partial void OnMeteringDeviceGUIDChanged();
    partial void OnMeteringDeviceValueChanging(decimal value);
    partial void OnMeteringDeviceValueChanged();
    partial void OnMeteringDeviceDateChanging(System.DateTime value);
    partial void OnMeteringDeviceDateChanged();
    #endregion
		
		public MeteringDeviceHistory()
		{
			this._MeteringDevice = default(EntityRef<MeteringDevice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeteringDeviceGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MeteringDeviceGUID
		{
			get
			{
				return this._MeteringDeviceGUID;
			}
			set
			{
				if ((this._MeteringDeviceGUID != value))
				{
					if (this._MeteringDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeteringDeviceGUIDChanging(value);
					this.SendPropertyChanging();
					this._MeteringDeviceGUID = value;
					this.SendPropertyChanged("MeteringDeviceGUID");
					this.OnMeteringDeviceGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeteringDeviceValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal MeteringDeviceValue
		{
			get
			{
				return this._MeteringDeviceValue;
			}
			set
			{
				if ((this._MeteringDeviceValue != value))
				{
					this.OnMeteringDeviceValueChanging(value);
					this.SendPropertyChanging();
					this._MeteringDeviceValue = value;
					this.SendPropertyChanged("MeteringDeviceValue");
					this.OnMeteringDeviceValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeteringDeviceDate", DbType="Date NOT NULL")]
		public System.DateTime MeteringDeviceDate
		{
			get
			{
				return this._MeteringDeviceDate;
			}
			set
			{
				if ((this._MeteringDeviceDate != value))
				{
					this.OnMeteringDeviceDateChanging(value);
					this.SendPropertyChanging();
					this._MeteringDeviceDate = value;
					this.SendPropertyChanged("MeteringDeviceDate");
					this.OnMeteringDeviceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeteringDevice_MeteringDeviceHistory", Storage="_MeteringDevice", ThisKey="MeteringDeviceGUID", OtherKey="GUID", IsForeignKey=true)]
		public MeteringDevice MeteringDevice
		{
			get
			{
				return this._MeteringDevice.Entity;
			}
			set
			{
				MeteringDevice previousValue = this._MeteringDevice.Entity;
				if (((previousValue != value) 
							|| (this._MeteringDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeteringDevice.Entity = null;
						previousValue.MeteringDeviceHistory.Remove(this);
					}
					this._MeteringDevice.Entity = value;
					if ((value != null))
					{
						value.MeteringDeviceHistory.Add(this);
						this._MeteringDeviceGUID = value.GUID;
					}
					else
					{
						this._MeteringDeviceGUID = default(System.Guid);
					}
					this.SendPropertyChanged("MeteringDevice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectAddress")]
	public partial class ObjectAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _SupplyResourceContractGUID;
		
		private System.Guid _FIASHouseGUID;
		
		private string _Apartment;
		
		private string _LivingRoom;
		
		private System.Nullable<System.Guid> _GIS_ObjectGUID;
		
		private EntitySet<Accounts> _Accounts;
		
		private EntitySet<MeteringDevice> _MeteringDevice;
		
		private EntityRef<SupplyResourceContract> _SupplyResourceContract;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnSupplyResourceContractGUIDChanging(System.Guid value);
    partial void OnSupplyResourceContractGUIDChanged();
    partial void OnFIASHouseGUIDChanging(System.Guid value);
    partial void OnFIASHouseGUIDChanged();
    partial void OnApartmentChanging(string value);
    partial void OnApartmentChanged();
    partial void OnLivingRoomChanging(string value);
    partial void OnLivingRoomChanged();
    partial void OnGIS_ObjectGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnGIS_ObjectGUIDChanged();
    #endregion
		
		public ObjectAddress()
		{
			this._Accounts = new EntitySet<Accounts>(new Action<Accounts>(this.attach_Accounts), new Action<Accounts>(this.detach_Accounts));
			this._MeteringDevice = new EntitySet<MeteringDevice>(new Action<MeteringDevice>(this.attach_MeteringDevice), new Action<MeteringDevice>(this.detach_MeteringDevice));
			this._SupplyResourceContract = default(EntityRef<SupplyResourceContract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyResourceContractGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SupplyResourceContractGUID
		{
			get
			{
				return this._SupplyResourceContractGUID;
			}
			set
			{
				if ((this._SupplyResourceContractGUID != value))
				{
					if (this._SupplyResourceContract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplyResourceContractGUIDChanging(value);
					this.SendPropertyChanging();
					this._SupplyResourceContractGUID = value;
					this.SendPropertyChanged("SupplyResourceContractGUID");
					this.OnSupplyResourceContractGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIASHouseGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FIASHouseGUID
		{
			get
			{
				return this._FIASHouseGUID;
			}
			set
			{
				if ((this._FIASHouseGUID != value))
				{
					this.OnFIASHouseGUIDChanging(value);
					this.SendPropertyChanging();
					this._FIASHouseGUID = value;
					this.SendPropertyChanged("FIASHouseGUID");
					this.OnFIASHouseGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Apartment", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string Apartment
		{
			get
			{
				return this._Apartment;
			}
			set
			{
				if ((this._Apartment != value))
				{
					this.OnApartmentChanging(value);
					this.SendPropertyChanging();
					this._Apartment = value;
					this.SendPropertyChanged("Apartment");
					this.OnApartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivingRoom", DbType="NVarChar(5)")]
		public string LivingRoom
		{
			get
			{
				return this._LivingRoom;
			}
			set
			{
				if ((this._LivingRoom != value))
				{
					this.OnLivingRoomChanging(value);
					this.SendPropertyChanging();
					this._LivingRoom = value;
					this.SendPropertyChanged("LivingRoom");
					this.OnLivingRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_ObjectGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GIS_ObjectGUID
		{
			get
			{
				return this._GIS_ObjectGUID;
			}
			set
			{
				if ((this._GIS_ObjectGUID != value))
				{
					this.OnGIS_ObjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._GIS_ObjectGUID = value;
					this.SendPropertyChanged("GIS_ObjectGUID");
					this.OnGIS_ObjectGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectAddress_Accounts", Storage="_Accounts", ThisKey="GUID", OtherKey="ObjectAddressGUID")]
		public EntitySet<Accounts> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ObjectAddress_MeteringDevice", Storage="_MeteringDevice", ThisKey="GUID", OtherKey="ObjectAddressGUID")]
		public EntitySet<MeteringDevice> MeteringDevice
		{
			get
			{
				return this._MeteringDevice;
			}
			set
			{
				this._MeteringDevice.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplyResourceContract_ObjectAddress", Storage="_SupplyResourceContract", ThisKey="SupplyResourceContractGUID", OtherKey="GUID", IsForeignKey=true)]
		public SupplyResourceContract SupplyResourceContract
		{
			get
			{
				return this._SupplyResourceContract.Entity;
			}
			set
			{
				SupplyResourceContract previousValue = this._SupplyResourceContract.Entity;
				if (((previousValue != value) 
							|| (this._SupplyResourceContract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplyResourceContract.Entity = null;
						previousValue.ObjectAddress.Remove(this);
					}
					this._SupplyResourceContract.Entity = value;
					if ((value != null))
					{
						value.ObjectAddress.Add(this);
						this._SupplyResourceContractGUID = value.GUID;
					}
					else
					{
						this._SupplyResourceContractGUID = default(System.Guid);
					}
					this.SendPropertyChanged("SupplyResourceContract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Accounts entity)
		{
			this.SendPropertyChanging();
			entity.ObjectAddress = this;
		}
		
		private void detach_Accounts(Accounts entity)
		{
			this.SendPropertyChanging();
			entity.ObjectAddress = null;
		}
		
		private void attach_MeteringDevice(MeteringDevice entity)
		{
			this.SendPropertyChanging();
			entity.ObjectAddress = this;
		}
		
		private void detach_MeteringDevice(MeteringDevice entity)
		{
			this.SendPropertyChanging();
			entity.ObjectAddress = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayerInfo")]
	public partial class PayerInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _AccountGUID;
		
		private string _Surname;
		
		private string _Name;
		
		private string _GrandName;
		
		private string _SNILS;
		
		private string _Series;
		
		private string _Number;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private EntityRef<Accounts> _Accounts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnAccountGUIDChanging(System.Guid value);
    partial void OnAccountGUIDChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGrandNameChanging(string value);
    partial void OnGrandNameChanged();
    partial void OnSNILSChanging(string value);
    partial void OnSNILSChanged();
    partial void OnSeriesChanging(string value);
    partial void OnSeriesChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    #endregion
		
		public PayerInfo()
		{
			this._Accounts = default(EntityRef<Accounts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountGUID
		{
			get
			{
				return this._AccountGUID;
			}
			set
			{
				if ((this._AccountGUID != value))
				{
					if (this._Accounts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountGUIDChanging(value);
					this.SendPropertyChanging();
					this._AccountGUID = value;
					this.SendPropertyChanged("AccountGUID");
					this.OnAccountGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrandName", DbType="NVarChar(50)")]
		public string GrandName
		{
			get
			{
				return this._GrandName;
			}
			set
			{
				if ((this._GrandName != value))
				{
					this.OnGrandNameChanging(value);
					this.SendPropertyChanging();
					this._GrandName = value;
					this.SendPropertyChanged("GrandName");
					this.OnGrandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SNILS", DbType="NVarChar(11)")]
		public string SNILS
		{
			get
			{
				return this._SNILS;
			}
			set
			{
				if ((this._SNILS != value))
				{
					this.OnSNILSChanging(value);
					this.SendPropertyChanging();
					this._SNILS = value;
					this.SendPropertyChanged("SNILS");
					this.OnSNILSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Series", DbType="NVarChar(10)")]
		public string Series
		{
			get
			{
				return this._Series;
			}
			set
			{
				if ((this._Series != value))
				{
					this.OnSeriesChanging(value);
					this.SendPropertyChanging();
					this._Series = value;
					this.SendPropertyChanged("Series");
					this.OnSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(10)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="Date")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accounts_PayerInfo", Storage="_Accounts", ThisKey="AccountGUID", OtherKey="GUID", IsForeignKey=true)]
		public Accounts Accounts
		{
			get
			{
				return this._Accounts.Entity;
			}
			set
			{
				Accounts previousValue = this._Accounts.Entity;
				if (((previousValue != value) 
							|| (this._Accounts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accounts.Entity = null;
						previousValue.PayerInfo.Remove(this);
					}
					this._Accounts.Entity = value;
					if ((value != null))
					{
						value.PayerInfo.Add(this);
						this._AccountGUID = value.GUID;
					}
					else
					{
						this._AccountGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Accounts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RefNsiService51")]
	public partial class RefNsiService51 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Code;
		
		private System.Guid _GUID;
		
		private bool _IsActual;
		
		private string _Value;
		
		private System.Nullable<System.DateTime> _GIS_Modified;
		
		private EntitySet<RefServices> _RefServices;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnIsActualChanging(bool value);
    partial void OnIsActualChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnGIS_ModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnGIS_ModifiedChanged();
    #endregion
		
		public RefNsiService51()
		{
			this._RefServices = new EntitySet<RefServices>(new Action<RefServices>(this.attach_RefServices), new Action<RefServices>(this.detach_RefServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActual", DbType="Bit NOT NULL")]
		public bool IsActual
		{
			get
			{
				return this._IsActual;
			}
			set
			{
				if ((this._IsActual != value))
				{
					this.OnIsActualChanging(value);
					this.SendPropertyChanging();
					this._IsActual = value;
					this.SendPropertyChanged("IsActual");
					this.OnIsActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_Modified", DbType="Date")]
		public System.Nullable<System.DateTime> GIS_Modified
		{
			get
			{
				return this._GIS_Modified;
			}
			set
			{
				if ((this._GIS_Modified != value))
				{
					this.OnGIS_ModifiedChanging(value);
					this.SendPropertyChanging();
					this._GIS_Modified = value;
					this.SendPropertyChanged("GIS_Modified");
					this.OnGIS_ModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefNsiService51_RefServices", Storage="_RefServices", ThisKey="ID", OtherKey="NsiService51ID")]
		public EntitySet<RefServices> RefServices
		{
			get
			{
				return this._RefServices;
			}
			set
			{
				this._RefServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefServices(RefServices entity)
		{
			this.SendPropertyChanging();
			entity.RefNsiService51 = this;
		}
		
		private void detach_RefServices(RefServices entity)
		{
			this.SendPropertyChanging();
			entity.RefNsiService51 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RefServices")]
	public partial class RefServices : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _ServiceName;
		
		private System.Guid _TariffGUID;
		
		private System.Guid _StandardGUID;
		
		private System.Nullable<System.Guid> _NsiService51ID;
		
		private EntitySet<ContractSubject> _ContractSubject;
		
		private EntityRef<RefNsiService51> _RefNsiService51;
		
		private EntityRef<RefStandard> _RefStandard;
		
		private EntityRef<RefTariff> _RefTariff;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnServiceNameChanging(string value);
    partial void OnServiceNameChanged();
    partial void OnTariffGUIDChanging(System.Guid value);
    partial void OnTariffGUIDChanged();
    partial void OnStandardGUIDChanging(System.Guid value);
    partial void OnStandardGUIDChanged();
    partial void OnNsiService51IDChanging(System.Nullable<System.Guid> value);
    partial void OnNsiService51IDChanged();
    #endregion
		
		public RefServices()
		{
			this._ContractSubject = new EntitySet<ContractSubject>(new Action<ContractSubject>(this.attach_ContractSubject), new Action<ContractSubject>(this.detach_ContractSubject));
			this._RefNsiService51 = default(EntityRef<RefNsiService51>);
			this._RefStandard = default(EntityRef<RefStandard>);
			this._RefTariff = default(EntityRef<RefTariff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ServiceName
		{
			get
			{
				return this._ServiceName;
			}
			set
			{
				if ((this._ServiceName != value))
				{
					this.OnServiceNameChanging(value);
					this.SendPropertyChanging();
					this._ServiceName = value;
					this.SendPropertyChanged("ServiceName");
					this.OnServiceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TariffGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TariffGUID
		{
			get
			{
				return this._TariffGUID;
			}
			set
			{
				if ((this._TariffGUID != value))
				{
					if (this._RefTariff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTariffGUIDChanging(value);
					this.SendPropertyChanging();
					this._TariffGUID = value;
					this.SendPropertyChanged("TariffGUID");
					this.OnTariffGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StandardGUID
		{
			get
			{
				return this._StandardGUID;
			}
			set
			{
				if ((this._StandardGUID != value))
				{
					if (this._RefStandard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStandardGUIDChanging(value);
					this.SendPropertyChanging();
					this._StandardGUID = value;
					this.SendPropertyChanged("StandardGUID");
					this.OnStandardGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NsiService51ID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NsiService51ID
		{
			get
			{
				return this._NsiService51ID;
			}
			set
			{
				if ((this._NsiService51ID != value))
				{
					if (this._RefNsiService51.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNsiService51IDChanging(value);
					this.SendPropertyChanging();
					this._NsiService51ID = value;
					this.SendPropertyChanged("NsiService51ID");
					this.OnNsiService51IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefServices_ContractSubject", Storage="_ContractSubject", ThisKey="GUID", OtherKey="ServiceGUID")]
		public EntitySet<ContractSubject> ContractSubject
		{
			get
			{
				return this._ContractSubject;
			}
			set
			{
				this._ContractSubject.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefNsiService51_RefServices", Storage="_RefNsiService51", ThisKey="NsiService51ID", OtherKey="ID", IsForeignKey=true)]
		public RefNsiService51 RefNsiService51
		{
			get
			{
				return this._RefNsiService51.Entity;
			}
			set
			{
				RefNsiService51 previousValue = this._RefNsiService51.Entity;
				if (((previousValue != value) 
							|| (this._RefNsiService51.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefNsiService51.Entity = null;
						previousValue.RefServices.Remove(this);
					}
					this._RefNsiService51.Entity = value;
					if ((value != null))
					{
						value.RefServices.Add(this);
						this._NsiService51ID = value.ID;
					}
					else
					{
						this._NsiService51ID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("RefNsiService51");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefStandard_RefServices", Storage="_RefStandard", ThisKey="StandardGUID", OtherKey="GUID", IsForeignKey=true)]
		public RefStandard RefStandard
		{
			get
			{
				return this._RefStandard.Entity;
			}
			set
			{
				RefStandard previousValue = this._RefStandard.Entity;
				if (((previousValue != value) 
							|| (this._RefStandard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefStandard.Entity = null;
						previousValue.RefServices.Remove(this);
					}
					this._RefStandard.Entity = value;
					if ((value != null))
					{
						value.RefServices.Add(this);
						this._StandardGUID = value.GUID;
					}
					else
					{
						this._StandardGUID = default(System.Guid);
					}
					this.SendPropertyChanged("RefStandard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefTariff_RefServices", Storage="_RefTariff", ThisKey="TariffGUID", OtherKey="GUID", IsForeignKey=true)]
		public RefTariff RefTariff
		{
			get
			{
				return this._RefTariff.Entity;
			}
			set
			{
				RefTariff previousValue = this._RefTariff.Entity;
				if (((previousValue != value) 
							|| (this._RefTariff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefTariff.Entity = null;
						previousValue.RefServices.Remove(this);
					}
					this._RefTariff.Entity = value;
					if ((value != null))
					{
						value.RefServices.Add(this);
						this._TariffGUID = value.GUID;
					}
					else
					{
						this._TariffGUID = default(System.Guid);
					}
					this.SendPropertyChanged("RefTariff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContractSubject(ContractSubject entity)
		{
			this.SendPropertyChanging();
			entity.RefServices = this;
		}
		
		private void detach_ContractSubject(ContractSubject entity)
		{
			this.SendPropertyChanging();
			entity.RefServices = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RefStandard")]
	public partial class RefStandard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _StandardName;
		
		private decimal _StandardValue;
		
		private EntitySet<RefServices> _RefServices;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnStandardNameChanging(string value);
    partial void OnStandardNameChanged();
    partial void OnStandardValueChanging(decimal value);
    partial void OnStandardValueChanged();
    #endregion
		
		public RefStandard()
		{
			this._RefServices = new EntitySet<RefServices>(new Action<RefServices>(this.attach_RefServices), new Action<RefServices>(this.detach_RefServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StandardName
		{
			get
			{
				return this._StandardName;
			}
			set
			{
				if ((this._StandardName != value))
				{
					this.OnStandardNameChanging(value);
					this.SendPropertyChanging();
					this._StandardName = value;
					this.SendPropertyChanged("StandardName");
					this.OnStandardNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal StandardValue
		{
			get
			{
				return this._StandardValue;
			}
			set
			{
				if ((this._StandardValue != value))
				{
					this.OnStandardValueChanging(value);
					this.SendPropertyChanging();
					this._StandardValue = value;
					this.SendPropertyChanged("StandardValue");
					this.OnStandardValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefStandard_RefServices", Storage="_RefServices", ThisKey="GUID", OtherKey="StandardGUID")]
		public EntitySet<RefServices> RefServices
		{
			get
			{
				return this._RefServices;
			}
			set
			{
				this._RefServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefServices(RefServices entity)
		{
			this.SendPropertyChanging();
			entity.RefStandard = this;
		}
		
		private void detach_RefServices(RefServices entity)
		{
			this.SendPropertyChanging();
			entity.RefStandard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RefTariff")]
	public partial class RefTariff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private string _TariffName;
		
		private decimal _TariffValue;
		
		private EntitySet<RefServices> _RefServices;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnTariffNameChanging(string value);
    partial void OnTariffNameChanged();
    partial void OnTariffValueChanging(decimal value);
    partial void OnTariffValueChanged();
    #endregion
		
		public RefTariff()
		{
			this._RefServices = new EntitySet<RefServices>(new Action<RefServices>(this.attach_RefServices), new Action<RefServices>(this.detach_RefServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TariffName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TariffName
		{
			get
			{
				return this._TariffName;
			}
			set
			{
				if ((this._TariffName != value))
				{
					this.OnTariffNameChanging(value);
					this.SendPropertyChanging();
					this._TariffName = value;
					this.SendPropertyChanged("TariffName");
					this.OnTariffNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TariffValue", DbType="Decimal(18,2) NOT NULL")]
		public decimal TariffValue
		{
			get
			{
				return this._TariffValue;
			}
			set
			{
				if ((this._TariffValue != value))
				{
					this.OnTariffValueChanging(value);
					this.SendPropertyChanging();
					this._TariffValue = value;
					this.SendPropertyChanged("TariffValue");
					this.OnTariffValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefTariff_RefServices", Storage="_RefServices", ThisKey="GUID", OtherKey="TariffGUID")]
		public EntitySet<RefServices> RefServices
		{
			get
			{
				return this._RefServices;
			}
			set
			{
				this._RefServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RefServices(RefServices entity)
		{
			this.SendPropertyChanging();
			entity.RefTariff = this;
		}
		
		private void detach_RefServices(RefServices entity)
		{
			this.SendPropertyChanging();
			entity.RefTariff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContractSubject")]
	public partial class ContractSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Guid _ServiceGUID;
		
		private System.Guid _SupplyResourceContractGUID;
		
		private EntitySet<ChargeInfo> _ChargeInfo;
		
		private EntityRef<RefServices> _RefServices;
		
		private EntityRef<SupplyResourceContract> _SupplyResourceContract;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnServiceGUIDChanging(System.Guid value);
    partial void OnServiceGUIDChanged();
    partial void OnSupplyResourceContractGUIDChanging(System.Guid value);
    partial void OnSupplyResourceContractGUIDChanged();
    #endregion
		
		public ContractSubject()
		{
			this._ChargeInfo = new EntitySet<ChargeInfo>(new Action<ChargeInfo>(this.attach_ChargeInfo), new Action<ChargeInfo>(this.detach_ChargeInfo));
			this._RefServices = default(EntityRef<RefServices>);
			this._SupplyResourceContract = default(EntityRef<SupplyResourceContract>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="Date NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="Date")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ServiceGUID
		{
			get
			{
				return this._ServiceGUID;
			}
			set
			{
				if ((this._ServiceGUID != value))
				{
					if (this._RefServices.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceGUIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceGUID = value;
					this.SendPropertyChanged("ServiceGUID");
					this.OnServiceGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplyResourceContractGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SupplyResourceContractGUID
		{
			get
			{
				return this._SupplyResourceContractGUID;
			}
			set
			{
				if ((this._SupplyResourceContractGUID != value))
				{
					if (this._SupplyResourceContract.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupplyResourceContractGUIDChanging(value);
					this.SendPropertyChanging();
					this._SupplyResourceContractGUID = value;
					this.SendPropertyChanged("SupplyResourceContractGUID");
					this.OnSupplyResourceContractGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractSubject_ChargeInfo", Storage="_ChargeInfo", ThisKey="GUID", OtherKey="ContractSubjectGUID")]
		public EntitySet<ChargeInfo> ChargeInfo
		{
			get
			{
				return this._ChargeInfo;
			}
			set
			{
				this._ChargeInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RefServices_ContractSubject", Storage="_RefServices", ThisKey="ServiceGUID", OtherKey="GUID", IsForeignKey=true)]
		public RefServices RefServices
		{
			get
			{
				return this._RefServices.Entity;
			}
			set
			{
				RefServices previousValue = this._RefServices.Entity;
				if (((previousValue != value) 
							|| (this._RefServices.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RefServices.Entity = null;
						previousValue.ContractSubject.Remove(this);
					}
					this._RefServices.Entity = value;
					if ((value != null))
					{
						value.ContractSubject.Add(this);
						this._ServiceGUID = value.GUID;
					}
					else
					{
						this._ServiceGUID = default(System.Guid);
					}
					this.SendPropertyChanged("RefServices");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SupplyResourceContract_ContractSubject", Storage="_SupplyResourceContract", ThisKey="SupplyResourceContractGUID", OtherKey="GUID", IsForeignKey=true)]
		public SupplyResourceContract SupplyResourceContract
		{
			get
			{
				return this._SupplyResourceContract.Entity;
			}
			set
			{
				SupplyResourceContract previousValue = this._SupplyResourceContract.Entity;
				if (((previousValue != value) 
							|| (this._SupplyResourceContract.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SupplyResourceContract.Entity = null;
						previousValue.ContractSubject.Remove(this);
					}
					this._SupplyResourceContract.Entity = value;
					if ((value != null))
					{
						value.ContractSubject.Add(this);
						this._SupplyResourceContractGUID = value.GUID;
					}
					else
					{
						this._SupplyResourceContractGUID = default(System.Guid);
					}
					this.SendPropertyChanged("SupplyResourceContract");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChargeInfo(ChargeInfo entity)
		{
			this.SendPropertyChanging();
			entity.ContractSubject = this;
		}
		
		private void detach_ChargeInfo(ChargeInfo entity)
		{
			this.SendPropertyChanging();
			entity.ContractSubject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChargeInfo")]
	public partial class ChargeInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _CalculationGUID;
		
		private System.Guid _ContractSubjectGUID;
		
		private decimal _Volume;
		
		private decimal _CalculationResult;
		
		private string _VolumeDeterminingMethod;
		
		private System.Nullable<System.Guid> _MeteringDeviceGUID;
		
		private EntityRef<ContractSubject> _ContractSubject;
		
		private EntityRef<MeteringDevice> _MeteringDevice;
		
		private EntityRef<Calculation> _Calculation;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnCalculationGUIDChanging(System.Guid value);
    partial void OnCalculationGUIDChanged();
    partial void OnContractSubjectGUIDChanging(System.Guid value);
    partial void OnContractSubjectGUIDChanged();
    partial void OnVolumeChanging(decimal value);
    partial void OnVolumeChanged();
    partial void OnCalculationResultChanging(decimal value);
    partial void OnCalculationResultChanged();
    partial void OnVolumeDeterminingMethodChanging(string value);
    partial void OnVolumeDeterminingMethodChanged();
    partial void OnMeteringDeviceGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnMeteringDeviceGUIDChanged();
    #endregion
		
		public ChargeInfo()
		{
			this._ContractSubject = default(EntityRef<ContractSubject>);
			this._MeteringDevice = default(EntityRef<MeteringDevice>);
			this._Calculation = default(EntityRef<Calculation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CalculationGUID
		{
			get
			{
				return this._CalculationGUID;
			}
			set
			{
				if ((this._CalculationGUID != value))
				{
					if (this._Calculation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalculationGUIDChanging(value);
					this.SendPropertyChanging();
					this._CalculationGUID = value;
					this.SendPropertyChanged("CalculationGUID");
					this.OnCalculationGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractSubjectGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractSubjectGUID
		{
			get
			{
				return this._ContractSubjectGUID;
			}
			set
			{
				if ((this._ContractSubjectGUID != value))
				{
					if (this._ContractSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractSubjectGUIDChanging(value);
					this.SendPropertyChanging();
					this._ContractSubjectGUID = value;
					this.SendPropertyChanged("ContractSubjectGUID");
					this.OnContractSubjectGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Decimal(18,2) NOT NULL")]
		public decimal Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationResult", DbType="Decimal(18,2) NOT NULL")]
		public decimal CalculationResult
		{
			get
			{
				return this._CalculationResult;
			}
			set
			{
				if ((this._CalculationResult != value))
				{
					this.OnCalculationResultChanging(value);
					this.SendPropertyChanging();
					this._CalculationResult = value;
					this.SendPropertyChanged("CalculationResult");
					this.OnCalculationResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeDeterminingMethod", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string VolumeDeterminingMethod
		{
			get
			{
				return this._VolumeDeterminingMethod;
			}
			set
			{
				if ((this._VolumeDeterminingMethod != value))
				{
					this.OnVolumeDeterminingMethodChanging(value);
					this.SendPropertyChanging();
					this._VolumeDeterminingMethod = value;
					this.SendPropertyChanged("VolumeDeterminingMethod");
					this.OnVolumeDeterminingMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeteringDeviceGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MeteringDeviceGUID
		{
			get
			{
				return this._MeteringDeviceGUID;
			}
			set
			{
				if ((this._MeteringDeviceGUID != value))
				{
					if (this._MeteringDevice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeteringDeviceGUIDChanging(value);
					this.SendPropertyChanging();
					this._MeteringDeviceGUID = value;
					this.SendPropertyChanged("MeteringDeviceGUID");
					this.OnMeteringDeviceGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContractSubject_ChargeInfo", Storage="_ContractSubject", ThisKey="ContractSubjectGUID", OtherKey="GUID", IsForeignKey=true)]
		public ContractSubject ContractSubject
		{
			get
			{
				return this._ContractSubject.Entity;
			}
			set
			{
				ContractSubject previousValue = this._ContractSubject.Entity;
				if (((previousValue != value) 
							|| (this._ContractSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContractSubject.Entity = null;
						previousValue.ChargeInfo.Remove(this);
					}
					this._ContractSubject.Entity = value;
					if ((value != null))
					{
						value.ChargeInfo.Add(this);
						this._ContractSubjectGUID = value.GUID;
					}
					else
					{
						this._ContractSubjectGUID = default(System.Guid);
					}
					this.SendPropertyChanged("ContractSubject");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MeteringDevice_ChargeInfo", Storage="_MeteringDevice", ThisKey="MeteringDeviceGUID", OtherKey="GUID", IsForeignKey=true)]
		public MeteringDevice MeteringDevice
		{
			get
			{
				return this._MeteringDevice.Entity;
			}
			set
			{
				MeteringDevice previousValue = this._MeteringDevice.Entity;
				if (((previousValue != value) 
							|| (this._MeteringDevice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeteringDevice.Entity = null;
						previousValue.ChargeInfo.Remove(this);
					}
					this._MeteringDevice.Entity = value;
					if ((value != null))
					{
						value.ChargeInfo.Add(this);
						this._MeteringDeviceGUID = value.GUID;
					}
					else
					{
						this._MeteringDeviceGUID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("MeteringDevice");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Calculation_ChargeInfo", Storage="_Calculation", ThisKey="CalculationGUID", OtherKey="GUID", IsForeignKey=true)]
		public Calculation Calculation
		{
			get
			{
				return this._Calculation.Entity;
			}
			set
			{
				Calculation previousValue = this._Calculation.Entity;
				if (((previousValue != value) 
							|| (this._Calculation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Calculation.Entity = null;
						previousValue.ChargeInfo.Remove(this);
					}
					this._Calculation.Entity = value;
					if ((value != null))
					{
						value.ChargeInfo.Add(this);
						this._CalculationGUID = value.GUID;
					}
					else
					{
						this._CalculationGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Calculation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwChargeInfo")]
	public partial class vwChargeInfo
	{
		
		private System.Guid _CalculationGUID;
		
		private System.Guid _ContractSubjectGUID;
		
		private System.Nullable<decimal> _Volume;
		
		private System.Nullable<decimal> _CalculationResult;
		
		private string _VolumeDeterminingMethodChar;
		
		public vwChargeInfo()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CalculationGUID
		{
			get
			{
				return this._CalculationGUID;
			}
			set
			{
				if ((this._CalculationGUID != value))
				{
					this._CalculationGUID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractSubjectGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ContractSubjectGUID
		{
			get
			{
				return this._ContractSubjectGUID;
			}
			set
			{
				if ((this._ContractSubjectGUID != value))
				{
					this._ContractSubjectGUID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationResult", DbType="Decimal(38,2)")]
		public System.Nullable<decimal> CalculationResult
		{
			get
			{
				return this._CalculationResult;
			}
			set
			{
				if ((this._CalculationResult != value))
				{
					this._CalculationResult = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VolumeDeterminingMethodChar", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string VolumeDeterminingMethodChar
		{
			get
			{
				return this._VolumeDeterminingMethodChar;
			}
			set
			{
				if ((this._VolumeDeterminingMethodChar != value))
				{
					this._VolumeDeterminingMethodChar = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Calculation")]
	public partial class Calculation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _GUID;
		
		private System.Guid _AccountGUID;
		
		private int _CalculationMonth;
		
		private int _CalculationYear;
		
		private string _GIS_PaymentDocumentNumber;
		
		private EntitySet<ChargeInfo> _ChargeInfo;
		
		private EntityRef<Accounts> _Accounts;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGUIDChanging(System.Guid value);
    partial void OnGUIDChanged();
    partial void OnAccountGUIDChanging(System.Guid value);
    partial void OnAccountGUIDChanged();
    partial void OnCalculationMonthChanging(int value);
    partial void OnCalculationMonthChanged();
    partial void OnCalculationYearChanging(int value);
    partial void OnCalculationYearChanged();
    partial void OnGIS_PaymentDocumentNumberChanging(string value);
    partial void OnGIS_PaymentDocumentNumberChanged();
    #endregion
		
		public Calculation()
		{
			this._ChargeInfo = new EntitySet<ChargeInfo>(new Action<ChargeInfo>(this.attach_ChargeInfo), new Action<ChargeInfo>(this.detach_ChargeInfo));
			this._Accounts = default(EntityRef<Accounts>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GUID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid GUID
		{
			get
			{
				return this._GUID;
			}
			set
			{
				if ((this._GUID != value))
				{
					this.OnGUIDChanging(value);
					this.SendPropertyChanging();
					this._GUID = value;
					this.SendPropertyChanged("GUID");
					this.OnGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountGUID
		{
			get
			{
				return this._AccountGUID;
			}
			set
			{
				if ((this._AccountGUID != value))
				{
					if (this._Accounts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountGUIDChanging(value);
					this.SendPropertyChanging();
					this._AccountGUID = value;
					this.SendPropertyChanged("AccountGUID");
					this.OnAccountGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationMonth", DbType="Int NOT NULL")]
		public int CalculationMonth
		{
			get
			{
				return this._CalculationMonth;
			}
			set
			{
				if ((this._CalculationMonth != value))
				{
					this.OnCalculationMonthChanging(value);
					this.SendPropertyChanging();
					this._CalculationMonth = value;
					this.SendPropertyChanged("CalculationMonth");
					this.OnCalculationMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationYear", DbType="Int NOT NULL")]
		public int CalculationYear
		{
			get
			{
				return this._CalculationYear;
			}
			set
			{
				if ((this._CalculationYear != value))
				{
					this.OnCalculationYearChanging(value);
					this.SendPropertyChanging();
					this._CalculationYear = value;
					this.SendPropertyChanged("CalculationYear");
					this.OnCalculationYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GIS_PaymentDocumentNumber", DbType="NVarChar(18)")]
		public string GIS_PaymentDocumentNumber
		{
			get
			{
				return this._GIS_PaymentDocumentNumber;
			}
			set
			{
				if ((this._GIS_PaymentDocumentNumber != value))
				{
					this.OnGIS_PaymentDocumentNumberChanging(value);
					this.SendPropertyChanging();
					this._GIS_PaymentDocumentNumber = value;
					this.SendPropertyChanged("GIS_PaymentDocumentNumber");
					this.OnGIS_PaymentDocumentNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Calculation_ChargeInfo", Storage="_ChargeInfo", ThisKey="GUID", OtherKey="CalculationGUID")]
		public EntitySet<ChargeInfo> ChargeInfo
		{
			get
			{
				return this._ChargeInfo;
			}
			set
			{
				this._ChargeInfo.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Accounts_Calculation", Storage="_Accounts", ThisKey="AccountGUID", OtherKey="GUID", IsForeignKey=true)]
		public Accounts Accounts
		{
			get
			{
				return this._Accounts.Entity;
			}
			set
			{
				Accounts previousValue = this._Accounts.Entity;
				if (((previousValue != value) 
							|| (this._Accounts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Accounts.Entity = null;
						previousValue.Calculation.Remove(this);
					}
					this._Accounts.Entity = value;
					if ((value != null))
					{
						value.Calculation.Add(this);
						this._AccountGUID = value.GUID;
					}
					else
					{
						this._AccountGUID = default(System.Guid);
					}
					this.SendPropertyChanged("Accounts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChargeInfo(ChargeInfo entity)
		{
			this.SendPropertyChanging();
			entity.Calculation = this;
		}
		
		private void detach_ChargeInfo(ChargeInfo entity)
		{
			this.SendPropertyChanging();
			entity.Calculation = null;
		}
	}
	
	public partial class fnCalculationAverageResult
	{
		
		private System.Nullable<decimal> _Volume;
		
		private System.Nullable<decimal> _Tariff;
		
		private System.Nullable<decimal> _Result;
		
		public fnCalculationAverageResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tariff", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Tariff
		{
			get
			{
				return this._Tariff;
			}
			set
			{
				if ((this._Tariff != value))
				{
					this._Tariff = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this._Result = value;
				}
			}
		}
	}
	
	public partial class fnCalculationReadingResult
	{
		
		private System.Nullable<decimal> _Volume;
		
		private System.Nullable<decimal> _Tariff;
		
		private System.Nullable<decimal> _Result;
		
		public fnCalculationReadingResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tariff", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Tariff
		{
			get
			{
				return this._Tariff;
			}
			set
			{
				if ((this._Tariff != value))
				{
					this._Tariff = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this._Result = value;
				}
			}
		}
	}
	
	public partial class fnCalculationStandardResult
	{
		
		private System.Nullable<decimal> _Volume;
		
		private System.Nullable<decimal> _Tariff;
		
		private System.Nullable<decimal> _Result;
		
		public fnCalculationStandardResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this._Volume = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tariff", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Tariff
		{
			get
			{
				return this._Tariff;
			}
			set
			{
				if ((this._Tariff != value))
				{
					this._Tariff = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this._Result = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
